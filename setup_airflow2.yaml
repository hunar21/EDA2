---
- name: Setup Airflow with SQLite using pip
  hosts: hosts
  become: yes

  vars:
    airflow_user: airflow
    airflow_home: /opt/airflow
    python_bin: "{{ airflow_home }}/venv/bin"
    airflow_admin_user: admin
    airflow_admin_pass: admin123
    airflow_admin_email: admin@example.com

  tasks:
    - name: Ensure system packages are present
      package:
        name:
          - python3
          - python3-pip
          - python3-virtualenv
          - gcc
          - python3-devel
          - libffi-devel
          - openssl-devel
        state: present


    - name: Install firewalld
      ansible.builtin.yum:
        name: firewalld
        state: present

    - name: Start and enable firewalld
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: yes

    - name: Allow port 8081 for Airflow UI via firewalld
      ansible.posix.firewalld:
        port: 8081/tcp
        permanent: yes
        state: enabled
        immediate: yes

    - name: Create airflow user if not exists
      user:
        name: "{{ airflow_user }}"
        shell: /bin/bash
        create_home: yes

    - name: Create airflow home directory
      file:
        path: "{{ airflow_home }}"
        state: directory
        owner: "{{ airflow_user }}"
        group: "{{ airflow_user }}"
        mode: 0755

    - name: Create Python virtual environment
      args:
        chdir: "{{ airflow_home }}"
        creates: "venv"
      become_user: "{{ airflow_user }}"
      command: python3 -m venv venv

    - name: Upgrade pip inside venv
      become_user: "{{ airflow_user }}"
      command: "{{ python_bin }}/pip install --upgrade pip"

    - name: Install compatible Flask + Werkzeug
      become_user: "{{ airflow_user }}"
      command: "{{ python_bin }}/pip install Flask==2.2.5 werkzeug==2.2.3"

    - name: Install Apache Airflow with SQLite and constraints
      become_user: "{{ airflow_user }}"
      environment:
        AIRFLOW_HOME: "{{ airflow_home }}"
      command: >
        {{ python_bin }}/pip install
        "apache-airflow[sqlite]==2.10.5"
        --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.10.5/constraints-3.9.txt"

    - name: Initialize Airflow DB
      become_user: "{{ airflow_user }}"
      environment:
        AIRFLOW_HOME: "{{ airflow_home }}"
        PATH: "{{ python_bin }}:{{ ansible_env.PATH }}"
      command: "{{ python_bin }}/airflow db init"

    - name: Set executor in airflow.cfg to SequentialExecutor
      lineinfile:
        path: "{{ airflow_home }}/airflow.cfg"
        regexp: '^executor ='
        line: 'executor = SequentialExecutor'
        backup: yes
      become_user: "{{ airflow_user }}"

    - name: Create Airflow admin user
      become_user: "{{ airflow_user }}"
      environment:
        AIRFLOW_HOME: "{{ airflow_home }}"
        PATH: "{{ python_bin }}:{{ ansible_env.PATH }}"
      command: >
        {{ python_bin }}/airflow users create
        --username {{ airflow_admin_user }}
        --firstname Admin
        --lastname User
        --role Admin
        --email {{ airflow_admin_email }}
        --password {{ airflow_admin_pass }}

    - name: Ensure DAGs directory exists
      file:
        path: "{{ airflow_home }}/dags"
        state: directory
        owner: "{{ airflow_user }}"
        group: "{{ airflow_user }}"
        mode: '0755'

    - name: Copy DAG file to DAGs folder
      copy:
        src: /home/almalinux/EDA/stock_prediction_dag2.py
        dest: "{{ airflow_home }}/dags/stock_prediction_dag.py"
        owner: "{{ airflow_user }}"
        group: "{{ airflow_user }}"
        mode: '0644'

    - name: Fix ownership and permissions of airflow directory
      file:
        path: "{{ airflow_home }}"
        owner: "{{ airflow_user }}"
        group: "{{ airflow_user }}"
        recurse: yes
        mode: '0755'
      become_user: "{{ airflow_user }}"
      ignore_errors: yes
      


    - name: Start Airflow scheduler as background process
      become: yes
      become_user: airflow
      shell: |
        cd /opt/airflow
        source venv/bin/activate
        export AIRFLOW_HOME=/opt/airflow
        nohup airflow scheduler > /opt/airflow/scheduler.log 2>&1 &
      args:
        executable: /bin/bash

    - name: Set web_server_host to 0.0.0.0 in airflow.cfg
      lineinfile:
        path: "{{ airflow_home }}/airflow.cfg"
        regexp: '^web_server_host'
        line: 'web_server_host = 0.0.0.0'
        backup: yes
      become_user: "{{ airflow_user }}"

    - name: Start Airflow webserver as background process
      become: yes
      become_user: "{{ airflow_user }}"
      shell: |
        cd /opt/airflow
        source venv/bin/activate
        export AIRFLOW_HOME=/opt/airflow
        nohup airflow webserver -p 8081 > /opt/airflow/webserver.log 2>&1 &
      args:
        executable: /bin/bash
      environment:
        AIRFLOW__WEBSERVER__WEB_SERVER_HOST: "0.0.0.0"

    - name: Wait for Airflow webserver to be available
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 8081
        delay: 5
        timeout: 60

    

    - name: Increase job_heartbeat_sec in airflow.cfg
      lineinfile:
        path: "{{ airflow_home }}/airflow.cfg"
        regexp: '^job_heartbeat_sec'
        line: 'job_heartbeat_sec = 120'
        backup: yes
      become_user: "{{ airflow_user }}"

    - name: Increase scheduler_heartbeat_sec in airflow.cfg
      lineinfile:
        path: "{{ airflow_home }}/airflow.cfg"
        regexp: '^scheduler_heartbeat_sec'
        line: 'scheduler_heartbeat_sec = 120'
        backup: yes
      become_user: "{{ airflow_user }}"

   